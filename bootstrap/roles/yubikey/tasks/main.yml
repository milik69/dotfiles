---
- name: install gpg
  homebrew:
    name: gnupg
  when: os == "macos"

- name: install pexpect
  pip:
    name: pexpect

- name: find card info
  shell: "gpg --card-status"
  register: card_info
  ignore_errors: True

- name: import yubikey public key
  shell: "echo \"fetch\nquit\n\" | gpg --card-edit --command-fd 0 --status-fd 2"
  register: gpg_import
  ignore_errors: True

- name: find imported key
  set_fact:
    keyid_match: "{{ gpg_import.stderr | regex_search('IMPORT_OK 1 (.*)', '\\1') }}"
  when: gpg_import is succeeded

- name: set imported key id
  set_fact:
    keyid: "{{ (keyid_match | first ) if ( keyid_match | length > 0) else '' }}"
    imported_key: "{{ keyid_match | length > 0 | bool }}"
  when: gpg_import is succeeded

- name: trust imported key
  expect:
    command: "gpg --edit-key {{ keyid }}"
    responses:
      gpg>:
        - trust
        - quit
      Your decision?: 5
      (.*)set this key to ultimate trust?(.*): y 
  when: imported_key

- name: find auth key keygrip
  shell: "gpg -K --with-keygrip {{ keyid }} | grep -E \"ssb> (.*) \\[A\\]\" -A 1 | grep \"Keygrip\" | awk '{ print $3 }'"
  register: auth_keygrip
  when: imported_key

- name: write sshcontrol
  copy:
    dest: "{{ ansible_env.HOME }}/.gnupg/sshcontrol"
    content: "{{ auth_keygrip.stdout }}\n"
  when: imported_key

- name: export authentication for ssh
  shell: "gpg --export-ssh-key {{ keyid }}"
  when: imported_key

- name: find key info
  shell: "gpg -K --keyid-format LONG {{ keyid }} | grep -E \"ssb> .* \\[S\\]\" | awk '{ split($2,a,\"/\"); print a[2] }'"
  register: key_info
  when: imported_key

- name: find signing key info
  set_fact:
    signing_user: "{{ card_info.stdout | regex_search('Name of cardholder.*: (.*)', '\\1') | first }}"
    signing_email: "{{ card_info.stdout | regex_search('Login data.*: (.*)', '\\1') | first }}"
    signing_keyid: "{{ key_info.stdout }}"
  when: imported_key

- name: create git user config
  template:
    src: git-user.config
    dest: "{{ ansible_env.HOME }}/.git/user.config"
  when: imported_key
